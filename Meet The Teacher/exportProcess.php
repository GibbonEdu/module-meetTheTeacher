<?php
/*
Gibbon, Flexible & Open School System
Copyright (C) 2010, Ross Parker

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>.
*/

use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\IOFactory;
use PhpOffice\PhpSpreadsheet\Style\Fill;
use PhpOffice\PhpSpreadsheet\Style\Border;
use PhpOffice\PhpSpreadsheet\Cell\DataType;
use PhpOffice\PhpSpreadsheet\Style\Alignment;
use Gibbon\Module\MeetTheTeacher\Domain\BookingGateway;
use PhpOffice\PhpSpreadsheet\Worksheet\Drawing;
use Gibbon\Services\Format;

include '../../gibbon.php';

$URL = $session->get('absoluteURL').'/index.php?q=/modules/Meet The Teacher/export.php';

if (isActionAccessible($guid, $connection2, '/modules/Meet The Teacher/export.php') == false) {
    $URL .= '&return=error0';
    header("Location: {$URL}");
} else {

    // Create new PHPSpreadsheet object
    $excel = new Spreadsheet();

    // Create styles
    $headerStyle = [
        'fill' => [
            'type' => 'solid',
            'color' => ['rgb' => 'EEEEEE'],
        ],
        'borders' => [
            'allborders' => ['style' => Border::BORDER_THIN, 'color' => ['argb' => '444444'], ],
        ],
        'font' => [
            'size' => 12,
            'bold' => true,
        ],
        'alignment' => [
            'vertical' => Alignment::VERTICAL_CENTER,
        ],
    ];
    $rowStyle = [
        'font' => [
            'size' => 12,
        ],
    ];

    $breakStyle = [
        'font' => [
            'size' => 12,
            'italic' => true,
            'color' => ['rgb' => '999999'],
        ],
        'alignment' => [
            'vertical' => Alignment::VERTICAL_CENTER,
        ],
    ];

    $linkStyle = [
        'font' => [
            'size' => 12,
            'underline' => true,
            'color' => ['rgb' => '0000ff'],
        ],
    ];

    $currentStyle = ['fill' => [ 'type' => Fill::FILL_SOLID, 'color' => ['rgb' => 'B3EFC2'],]];
    $errorStyle = ['fill' => [ 'type' => Fill::FILL_SOLID, 'color' => ['rgb' => 'F6CECB'],]];
    $warningStyle = ['fill' => [ 'type' => Fill::FILL_SOLID, 'color' => ['rgb' => 'FFD2A9'],]];
    $rowStripeStyle = ['fill' => [ 'type' => Fill::FILL_SOLID, 'color' => ['rgb' => 'FAFAFA'],]];

    // Set document properties
    $excel->getProperties()->setCreator('Gibbon')
        ->setLastModifiedBy('Gibbon')
        ->setTitle('Meet The Teacher Export')
        ->setDescription(__('This information is confidential. Generated by Gibbon (https://gibbonedu.org).')) ;

    $excel->setActiveSheetIndex(0);
    $sheet = $excel->getActiveSheet();

    $num2alpha = function ($n) {
        for ($r = ''; $n >= 0; $n = intval($n / 26) - 1) {
            $r = chr($n % 26 + 0x41).$r;
        }
        return $r;
    };

    // Get some data
    $bookingGateway = $container->get(BookingGateway::class);
    $consultationName = $_POST['consultationName'] ?? '';

    $bookings = $bookingGateway->selectBookingsByTeacher($session->get('gibbonPersonID'), $consultationName)->fetchAll();
    $bookingInfo = current($bookings);

    // Generate some rows

    $rowCount = 1;
    $cellCount = 0;

    $headers = ['Photo', 'Time', 'Type', 'Student', 'Profile', 'Markbook', 'ATLs', 'Subject', 'Parent', 'Translator', 'Parent Message', 'Notes'];

    foreach ($headers as $index => $header) {
        $sheet->getRowDimension($rowCount)->setRowHeight(24);

        $alpha = $num2alpha($cellCount);
        $sheet->setCellValue($alpha.$rowCount, $header);
        $sheet->getStyle($alpha.$rowCount)->applyFromArray($headerStyle);
        $sheet->getColumnDimension($alpha)->setAutoSize($index > 0);
        $cellCount++;
    }

    $rowCount++;
    $lastEndTime = null;

    foreach ($bookings as $booking) {
        $startTime = strtotime($booking['appointmentStart']);
        if ($startTime != $lastEndTime && !empty($lastEndTime)) {
            $timeDiff = $startTime - $lastEndTime;

            $alpha = $num2alpha(0);
            $sheet->getRowDimension($rowCount)->setRowHeight(24);
            $sheet->setCellValue($alpha.$rowCount, ($timeDiff / 60) .' mins');
            $sheet->getStyle($alpha.$rowCount)->applyFromArray($breakStyle);
            $range = $alpha.$rowCount.':'.$num2alpha(count($headers)-1).$rowCount;
            $sheet->mergeCells($range);

            $rowCount++;
        }

        $cellCount = 0;
        $sheet->getRowDimension($rowCount)->setRowHeight(105);

        $photoPath = $session->get('absolutePath').'/'.$booking['image_240'];
        if (!file_exists($photoPath)) {
            $photoPath = $session->get('absolutePath').'/themes/Default/img/anonymous_75.jpg';
        }

        $drawing = new Drawing();
        $drawing->setName($booking['gibbonPersonIDStudent']);
        $drawing->setDescription($booking['preferredName']);
        $drawing->setPath($photoPath);
        $drawing->setCoordinates($num2alpha($cellCount).$rowCount);
        $drawing->setHeight(120);
        $drawing->setOffsetX(10);
        $drawing->setOffsetY(10);
        $drawing->setWorksheet($sheet);

        $alpha = $num2alpha($cellCount);
        $sheet->getColumnDimension($alpha)->setWidth(16);
        $cellCount++;

        $alpha = $num2alpha($cellCount);
        $sheet->setCellValue($alpha.$rowCount, Format::time($booking['appointmentStart']));
        $sheet->getStyle($alpha.$rowCount)->applyFromArray($rowStyle);
        $cellCount++;

        $alpha = $num2alpha($cellCount);
        $sheet->setCellValue($alpha.$rowCount, $booking['location'] == 'Video Call' ? 'Video' : 'In Person');
        $sheet->getStyle($alpha.$rowCount)->applyFromArray($rowStyle);
        $cellCount++;

        $alpha = $num2alpha($cellCount);
        $sheet->setCellValue($alpha.$rowCount, $booking['preferredName'].' '.$booking['surname']);
        $sheet->getStyle($alpha.$rowCount)->applyFromArray($rowStyle);
        $cellCount++;

        
        $profile = $session->get('absoluteURL').'/index.php?q=/modules/Students/student_view_details.php&gibbonPersonID='.$booking['gibbonPersonIDStudent'];
        $alpha = $num2alpha($cellCount);
        $sheet->setCellValue($alpha.$rowCount, 'Profile');
        $sheet->getCell($alpha.$rowCount)->getHyperlink()->setUrl($profile);
        $sheet->getStyle($alpha.$rowCount)->applyFromArray($linkStyle);
        $cellCount++;

        $alpha = $num2alpha($cellCount);
        $sheet->setCellValue($alpha.$rowCount, 'Markbook');
        $sheet->getCell($alpha.$rowCount)->getHyperlink()->setUrl($profile.'&subpage=Markbook#'.$booking['gibbonCourseClassID']);
        $sheet->getStyle($alpha.$rowCount)->applyFromArray($linkStyle);
        $cellCount++;

        $alpha = $num2alpha($cellCount);
        $sheet->setCellValue($alpha.$rowCount, 'ATLs');
        $sheet->getCell($alpha.$rowCount)->getHyperlink()->setUrl($profile.'&hook=ATL&module=ATL&action=View ATLs_all&gibbonHookID=0018');
        $sheet->getStyle($alpha.$rowCount)->applyFromArray($linkStyle);
        $cellCount++;

        $alpha = $num2alpha($cellCount);
        $sheet->setCellValue($alpha.$rowCount, !empty($booking['gibbonCourseClassID']) ? $booking['className'] : $booking['courseName']);
        $sheet->getStyle($alpha.$rowCount)->applyFromArray($rowStyle);
        $cellCount++;

        $alpha = $num2alpha($cellCount);
        $sheet->setCellValue($alpha.$rowCount, Format::name($booking['parentTitle'], $booking['parentPreferredName'], $booking['parentSurname'], 'Parent'));
        $sheet->getStyle($alpha.$rowCount)->applyFromArray($rowStyle);
        $cellCount++;

        $alpha = $num2alpha($cellCount);
        $sheet->setCellValue($alpha.$rowCount, $booking['parentTranslator']);
        $sheet->getStyle($alpha.$rowCount)->applyFromArray($rowStyle);
        $cellCount++;

        $alpha = $num2alpha($cellCount);
        $sheet->setCellValue($alpha.$rowCount, $booking['parentMessage']);
        $sheet->getStyle($alpha.$rowCount)->applyFromArray($rowStyle);
        $sheet->getColumnDimension($alpha)->setWidth(20);
        $sheet->getColumnDimension($alpha)->setAutoSize(false);
        $cellCount++;

        $alpha = $num2alpha($cellCount);
        $sheet->setCellValue($alpha.$rowCount, '');
        $sheet->getStyle($alpha.$rowCount)->applyFromArray($rowStyle);
        $sheet->getColumnDimension($alpha)->setWidth(30);
        $sheet->getColumnDimension($alpha)->setAutoSize(false);
        $cellCount++;
        
        $lastEndTime = strtotime($booking['appointmentEnd']);
        $rowCount++;
    }

    $filename = $bookingInfo['consultationName'] ?? 'MTT-Bookings-Export';
    $exportFileType = 'Excel2007';

    $filename .= '.xlsx';
    $mimetype = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
    $objWriter = IOFactory::createWriter($excel, 'Xlsx');
    
    // FINALIZE THE DOCUMENT SO IT IS READY FOR DOWNLOAD
    // Set active sheet index to the first sheet, so Excel opens this as the first sheet
    $excel->setActiveSheetIndex(0);

    // Fix mimetype so that spreadsheet files can be viewed on iOS devices
    if(stristr($_SERVER['HTTP_USER_AGENT'], 'ipad') !== false or stristr($_SERVER['HTTP_USER_AGENT'], 'iphone') !== false or stristr($_SERVER['HTTP_USER_AGENT'], 'ipod') !== false) {
        $mimetype = 'application/octet-stream';
        header('Content-type: application/octet-stream');
    }

    // Redirect output to a clientâ€™s web browser (Excel2007)
    header('Content-Type: '.$mimetype);
    header('Content-Disposition: attachment;filename="'.$filename.'"');
    header('Cache-Control: max-age=1');

    // If you're serving to IE over SSL, then the following may be needed
    header ('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
    header ('Last-Modified: '.gmdate('D, d M Y H:i:s').' GMT'); // always modified
    header ('Cache-Control: cache, must-revalidate'); // HTTP/1.1
    header ('Pragma: public'); // HTTP/1.0

    $objWriter->save('php://output');
}
